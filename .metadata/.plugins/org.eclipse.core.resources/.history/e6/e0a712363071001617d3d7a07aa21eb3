package com.example.test;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.PrintStream;

import org.apache.commons.codec.binary.Base64;

import com.example.domain.model.AddressBookProtos.AddressBook;
import com.example.domain.model.AddressBookProtos.Person;

public class AddPerson {


	// This function fills in a Person message based on user input.
	static Person PromptForAddress(BufferedReader stdin, PrintStream stdout) throws IOException 
	{
		Person.Builder person = Person.newBuilder();

		stdout.print("Enter person ID: ");
		person.setId(Integer.valueOf(stdin.readLine()));

		stdout.print("Enter name: ");
		person.setName(stdin.readLine());

		stdout.print("Enter email address (blank for none): ");
		String email = stdin.readLine();
		if (email.length() > 0) {
			person.setEmail(email);
		}

		while (true) 
		{
			stdout.print("Enter a phone number (or leave blank to finish): ");
			String number = stdin.readLine();
			if (number.length() == 0) {
				break;
			}

			Person.PhoneNumber.Builder phoneNumber =
			Person.PhoneNumber.newBuilder().setNumber(number);

			stdout.print("Is this a mobile, home, or work phone? ");
			String type = stdin.readLine();
			if (type.equals("mobile")) {
				phoneNumber.setType(Person.PhoneType.MOBILE);
			} else if (type.equals("home")) {
				phoneNumber.setType(Person.PhoneType.HOME);
			} else if (type.equals("work")) {
				phoneNumber.setType(Person.PhoneType.WORK);
			} else {
				stdout.println("Unknown phone type.  Using default.");
			}

			person.addPhone(phoneNumber);
		}

		return person.build();
	}
	
	
	public static void main(String[] args) throws IOException 
	{
		String arg = "c:\\temp\\book.txt"; 

	    AddressBook.Builder addressBook = AddressBook.newBuilder();

	    // Add an address.
	    addressBook.addPerson( PromptForAddress(new BufferedReader(new InputStreamReader(System.in)), System.out));
    	
	    // Write the new address book back to disk.
	    FileOutputStream output = new FileOutputStream(arg,true);
	    try 
	    {
	    	output.write(Base64.encodeBase64String(addressBook.build().toByteArray()).getBytes());
	    	output.write(13);
	    } 
	    finally 
	    {
	    	output.close();
	    }
	}
}
